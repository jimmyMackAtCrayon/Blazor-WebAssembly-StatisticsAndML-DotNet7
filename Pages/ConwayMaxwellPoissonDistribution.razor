@page "/ConwayMaxwellPoissonDistribution"

@inject IJSRuntime JSRuntime
@inject IJSRuntime JSRuntime


<div id="contentWrapper">

    <div class="row">
        <div class="column-6" style="display:block; border-radius:1.5em; background-color:#E6E4D9;height:460px; width:460px;margin-top:27px;margin-left:1%; ">
            <p style="margin-top:10%;">
                <dl>
                   <dt class="base">Distribution Mean:</dt>
                   <dd class="base">@mean</dd>
                   <dt class="base">Distribution Variance:</dt>
                   <dd class="base">@variance</dd>
                   <dt class="base">Time to generate data (ms):</dt>
                   <dd class="base">@TimeToGenerateData</dd>
                   <dt class="base">Lambda:</dt>
                    <dd style="padding-left:6px">
                        <input id="lambdaInput" type="range" min="1" max="10" step="1" style="width:90px;"
                               value="@this.Lambda" @onchange="@OnLambdaUpdated" oninput="lambdaOutput.value=lambdaInput.value" />
                        <output name="lambdaOutput" class="base" style="padding-left:6px;" id="lambdaOutput" for="lambdaInput">@this.Lambda</output>
                    </dd>
                   <dt class="base">Samples Size:</dt>
                    <dd style="padding-left:6px">
                        <input id="samplesSizeInput" type="range" min="250" max="20000" step="250" style="width:90px;"
                               value="@this.SamplesSize" @onchange="@OnSamplesSizeUpdated" oninput="samplesSizeOutput.value=samplesSizeInput.value" />
                        <output name="samplesSizeOutput" class="base" style="padding-left:6px;width:auto;" id="samplesSizeOutput" for="samplesSizeInput">@this.SamplesSize</output>
                    </dd>
                   <dt class="base">Nu:</dt>
                    <dd style="padding-left:6px">
                        <input id="nuInput" type="range" min="4" max="40" step="2" style="width:90px;"
                               value="@this.Nu" @onchange="@OnNuUpdated" oninput="nuOutput.value=nuInput.value/10" />
                        <output name="nuOutput" class="base" style="padding-left:6px;" id="nuOutput" for="nuInput">@(this.Nu / 10)</output>
                    </dd>
                </dl>
            </p>
        </div>
        <!--end of column -->
        <div class="column-6" style="text-align:center;padding-top:25px;margin-right:2%">
            <p id="my_dataviz" style="border-radius:1.5em;display:block;background-color:#E6E4D9; height:460px; width:460px;">

            </p>
        </div>

        <!--end of column -->
    </div>
    <!-- End of Row -->
</div>

@code {

    public double Lambda { get; set; }
    public double Nu { get; set; }
    public int SamplesSize { get; set; }
    public int[] SamplesArray { get; set; }
    public double TimeToGenerateData { get; set; }

    public class Data
    {
        public double Y;
    }

    double mean, variance;

    protected override Task OnParametersSetAsync()
    {
        this.Lambda = 2;
        this.Nu = 10;
        this.SamplesSize = 1000;
        this.TimeToGenerateData = 0.0;

        this.GenerateDistribution();

        return base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderChart();
        }
        else
        {
            this.GenerateDistribution();
            await RenderChart();
        }
    }

    private void GenerateDistribution()
    {
        var dateTime = DateTime.Now;

        // create a parametrized distribution instance
        var poisson = new MathNet.Numerics.Distributions.ConwayMaxwellPoisson(this.Lambda, (double) this.Nu/10);

        //// distribution properties
        mean = Math.Round(poisson.Mean, 2, MidpointRounding.AwayFromZero);
        variance = Math.Round(poisson.Variance, 2, MidpointRounding.AwayFromZero);
        //entropy = poisson.Entropy;
        //this.Probability = poisson.P;

        //double c = binomaial.CumulativeDistribution(0.6); // CDF

        // non-uniform number sampling
        this.SamplesArray = poisson.Samples().Take(this.SamplesSize).ToArray();

        var dateTimeElapsed = (DateTime.Now - dateTime).TotalMilliseconds;
        this.TimeToGenerateData = dateTimeElapsed;
    }

    private async Task RenderChart()
    {
        await JSRuntime.InvokeVoidAsync("createD3SvgObject", this.SamplesArray, mean, "Conway-Maxwell Sample Distribution");
    }

    private void OnLambdaUpdated(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            this.Lambda = index;
            this.GenerateDistribution();
        }
    }

    private void OnNuUpdated(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            this.Nu = index;
            this.GenerateDistribution();
        }
    }

    private void OnSamplesSizeUpdated(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            this.SamplesSize = index;
            this.GenerateDistribution();
        }
    }
}
