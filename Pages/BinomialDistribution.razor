@page "/BinomialDistribution"

@inject IJSRuntime JSRuntime
<style>
   
    input[type="range"] {
        -webkit-appearance: none;
        margin-right: 15px;
        width: 200px;
        height: 7px;
        background: rgba(255, 255, 255, 0.6);
        border-radius: 5px;
        background-image: linear-gradient(#FF6A4C, #FF6A4C);
        background-size: 70% 100%;
        background-repeat: no-repeat;
    }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            height: 20px;
            width: 20px;
            border-radius: 50%;
            background: #FF6A4C;
            cursor: ew-resize;
            box-shadow: 0 0 2px 0 #555;
            transition: background .3s ease-in-out;
        }

    input[type=range]::-webkit-slider-runnable-track {
        -webkit-appearance: none;
        box-shadow: none;
        border: none;
        background: transparent;
    }
    .base {
        color: #094E5D;
        font-size: 18px;
        
    }    

</style>

<div  style="padding-top:75px; padding-left:50px;">
    <table>
        <tr>
            <td style="background-color:#E6E4D9;padding:10px; width: 50%;border-radius: 25px; ">
                <div class="box lg" style="float: left; ">
                    <dl>
                        <div><dt class="base">Distribution Mean:</dt><dd class="base">@this.Mean</dd></div>
                        <div><dt class="base">Distribution Variance:</dt><dd class="base">@variance</dd></div>
                        <div><dt class="base">Time to generate data (ms):</dt><dd class="base">@TimeToGenerateData</dd></div>
                        <div><dt class="base">Probability:</dt>
                            <dd>
                            <input id="probabilityInput" type="range" min="0" max="100" step="5" style="font-size:18px;"
                                   value="@this.Probability" @onchange="@OnProbabilityUpdated" oninput="probabilityOutput.value=probabilityInput.value/100" />
                            <output name="probabilityOutput" style="color:#094E5D;  font-size:18px;"  id="probabilityOutput" for="probabilityInput">@(this.Probability / 100)</output>
                            </dd>
                        </div>
                        <div><dt class="base">Samples Size:</dt>
                           <dd>
                            <input id="samplesSizeInput" type="range" class="" min="250" max="20000" step="250" style="font-size:18px; "
                                   value="@this.SamplesSize" @onchange="@OnSamplesSizeUpdated" oninput="samplesSizeOutput.value=samplesSizeInput.value" />
                            <output name="samplesSizeOutput" class="base" style="width:55px;" id="samplesSizeOutput" for="samplesSizeInput">@this.SamplesSize</output>
                            </dd>
                        </div>
                        <div><dt class="base">Trials:</dt>
                          <dd>
                            <input id="trialsInput" type="range" class="base" min="0" max="500" step="10" style="font-size:18px; "
                                   value="@this.Trials" @onchange="@OnTrialsUpdated" oninput="trialsOutput.value=trialsInput.value" />
                            <output name="trialsOutput" class="base" id="trialsOutput" for="probabilityInput">@this.Trials</output>
                            </dd>
                        </div>
                    </dl>
                </div>
            </td>
            <td style="width: 5%; "><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div></td>
            <td style="background-color:#E6E4D9;padding:10px; width: 100%; border-radius: 25px; ">
                <!-- Create a div where the graph will take place -->
                <div class="box sm" id="my_dataviz" style="clear: both; text-align:center;">
                </div>
            </td>
        </tr>
    </table>
</div>




@code {

    public double Mean { get; set; }

    public double Probability { get; set; }
    public int Trials { get; set; }

    public int SamplesSize { get; set; }
    public int[] SamplesArray { get; set; }
    public double TimeToGenerateData { get; set; }

    public class Data
    {
        public double Y;
    }

    public List<Data> samples = new List<Data>(1000);
    double variance;

    protected override Task OnParametersSetAsync()
    {
        this.Probability = 60;
        this.Trials = 10;
        this.SamplesSize = 1000;
        this.TimeToGenerateData = 0.0;

        this.GenerateDistribution();

        return base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await this.RenderChart();
    }

    protected void GenerateDistribution()
    {
        var dateTime = DateTime.Now;

        // create a parametrized distribution instance
        var scaledProbability = (double)this.Probability / 100;
        var binomaial = new MathNet.Numerics.Distributions.Binomial(scaledProbability, this.Trials);

        //// distribution properties
        this.Mean = Math.Round(binomaial.Mean, 2, MidpointRounding.AwayFromZero);
        variance = Math.Round(binomaial.Variance, 2, MidpointRounding.AwayFromZero);

        //double c = binomaial.CumulativeDistribution(0.6); // CDF

        // non-uniform number sampling
        this.SamplesArray = binomaial.Samples().Take(this.SamplesSize).ToArray();

        var dateTimeElapsed = (DateTime.Now - dateTime).TotalMilliseconds;
        this.TimeToGenerateData = dateTimeElapsed;
    }

    private void OnProbabilityUpdated(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            this.Probability = index;
            this.GenerateDistribution();
        }
    }

    private void OnTrialsUpdated(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            this.Trials = index;
            this.GenerateDistribution();
        }
    }

    private void OnSamplesSizeUpdated(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            this.SamplesSize = index;
            this.GenerateDistribution();
        }
    }

    private async Task RenderChart()
    {
        await JSRuntime.InvokeVoidAsync("createD3SvgObject", this.SamplesArray, this.Mean, "Binomial Sample Distribution");
    }
}
