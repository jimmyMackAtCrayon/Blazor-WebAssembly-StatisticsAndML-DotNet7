@page "/BinomialDistribution"

@inject IJSRuntime JSRuntime
<div class="contentWrapper">
   
    <article class="contentSection">
        
        <p >
            <dl>
                <dt>Distribution Mean:</dt>
                <dd class="bumpLeft">@this.Mean</dd>
                <dt>Distribution Variance:</dt>
                <dd class="bumpLeft">@variance</dd>
                <dt>Time to generate data (ms):</dt>
                <dd class="bumpLeft">@TimeToGenerateData</dd>

                <dt>Probability:</dt>

                <dd style="padding-left:6px">
                    <input id="probabilityInput" type="range" min="5" max="100" step="5" style="width:90px;"
                           value="@this.Probability" @onchange="@OnProbabilityUpdated" oninput="probabilityOutput.value=probabilityInput.value/100" />
                    <output name="probabilityOutput" style="color:#094E5D; padding-left:6px; font-size:16px;" id="probabilityOutput" for="probabilityInput">@(this.Probability / 100)</output>
                </dd>



                <dt>Samples Size:</dt>
                <dd style="padding-left:6px">
                    <input id="samplesSizeInput" type="range" min="250" max="20000" step="250" style="width:90px;"
                           value="@this.SamplesSize" @onchange="@OnSamplesSizeUpdated" oninput="samplesSizeOutput.value=samplesSizeInput.value" />
                    <output name="samplesSizeOutput" style="padding-left:6px;width:55px;" id="samplesSizeOutput" for="samplesSizeInput">@this.SamplesSize</output>
                </dd>


                <dt>Trials:</dt>
                <dd style="padding-left:6px">
                    <input id="trialsInput" type="range" min="10" max="500" step="10" style="width:90px;"
                           value="@this.Trials" @onchange="@OnTrialsUpdated" oninput="trialsOutput.value=trialsInput.value" />
                    <output name="trialsOutput" style="padding-left:6px;" id="trialsOutput" for="probabilityInput">@this.Trials</output>
                </dd>


            </dl>
        </p>
    </article>
    <article class="contentSection">
        <p id="my_dataviz"></p>
    </article>    
     <article class="contentSection" style="background-color:transparent;">
        <p>&nbsp;</p>
    </article>
    
  
   

</div>


@code {

    public double Mean { get; set; }

    public double Probability { get; set; }
    public int Trials { get; set; }

    public int SamplesSize { get; set; }
    public int[] SamplesArray { get; set; }
    public double TimeToGenerateData { get; set; }

    public class Data
    {
        public double Y;
    }

    public List<Data> samples = new List<Data>(1000);
    double variance;

    protected override Task OnParametersSetAsync()
    {
        this.Probability = 60;
        this.Trials = 10;
        this.SamplesSize = 1000;
        this.TimeToGenerateData = 0.0;

        this.GenerateDistribution();

        return base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await this.RenderChart();
    }

    protected void GenerateDistribution()
    {
        var dateTime = DateTime.Now;

        // create a parametrized distribution instance
        var scaledProbability = (double)this.Probability / 100;
        var binomaial = new MathNet.Numerics.Distributions.Binomial(scaledProbability, this.Trials);

        //// distribution properties
        this.Mean = Math.Round(binomaial.Mean, 2, MidpointRounding.AwayFromZero);
        variance = Math.Round(binomaial.Variance, 2, MidpointRounding.AwayFromZero);

        //double c = binomaial.CumulativeDistribution(0.6); // CDF

        // non-uniform number sampling
        this.SamplesArray = binomaial.Samples().Take(this.SamplesSize).ToArray();

        var dateTimeElapsed = (DateTime.Now - dateTime).TotalMilliseconds;
        this.TimeToGenerateData = dateTimeElapsed;
    }

    private void OnProbabilityUpdated(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            this.Probability = index;
            this.GenerateDistribution();
        }
    }

    private void OnTrialsUpdated(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            this.Trials = index;
            this.GenerateDistribution();
        }
    }

    private void OnSamplesSizeUpdated(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            this.SamplesSize = index;
            this.GenerateDistribution();
        }
    }

    private async Task RenderChart()
    {
        await JSRuntime.InvokeVoidAsync("createD3SvgObject", this.SamplesArray, this.Mean, "Binomial Sample Distribution");
    }
}