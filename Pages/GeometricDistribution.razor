@page "/GeometricDistribution"

@inject IJSRuntime JSRuntime



<div id="contentWrapper">

    <div class="row">
        <div class="column-6" style="display:block; border-radius:1.5em; background-color:#E6E4D9;height:460px; width:460px;margin-top:27px;margin-left:1%; ">
            <p style="margin-top:10%;">
                <dl>
                    <div><dt class="base">Distribution Mean:</dt><dd class="base">@mean</dd></div>
                    <div><dt class="base">Distribution Variance:</dt><dd class="base">@variance</dd></div>
                    <div><dt class="base">Time To generate data (ms):</dt><dd class="base">@TimeToGenerateData</dd></div>
                    <div>
                        <dt class="base">Probability:</dt>
                        <dd style="padding-left:6px">
                            <input id="probabilityInput" type="range" min="5" max="100" step="5" style="width:100px;"
                                   value="@this.Probability" @onchange="@OnProbabilityUpdated" oninput="probabilityOutput.value=probabilityInput.value/100" />
                            <output name="probabilityOutput" style="color:#094E5D;padding-left:6px;  font-size:18px;" id="probabilityOutput" for="probabilityInput">@(this.Probability / 100)</output>
                        </dd>
                    </div>
                    <div>
                        <dt class="base">Samples Size:</dt>
                        <dd style="padding-left:6px">
                            <input id="samplesSizeInput" type="range" class="" min="250" max="20000" step="250" style="width:100px;"
                                   value="@this.SamplesSize" @onchange="@OnSamplesSizeUpdated" oninput="samplesSizeOutput.value=samplesSizeInput.value" />
                            <output name="samplesSizeOutput" class="base" style="padding-left:6px;width:55px;" id="samplesSizeOutput" for="samplesSizeInput">@this.SamplesSize</output>
                        </dd>
                    </div>
                </dl>
            </p>
        </div>
        <!--end of column -->
        <div class="column-6" style="text-align:center;padding-top:25px;margin-right:2%">
            <p id="my_dataviz" style="border-radius:1.5em;display:block;background-color:#E6E4D9; height:460px; width:460px;">

            </p>
        </div>

        <!--end of column -->
    </div>
    <!-- End of Row -->
</div>


@code {

    public double Probability { get; set; }
    public int SamplesSize { get; set; }
    public int[] SamplesArray { get; set; }
    public double TimeToGenerateData { get; set; }

    public class Data
    {
        public double Y;
    }

    public List<Data> samples = new List<Data>(1000);
    double mean, variance, entropy;

    protected override Task OnParametersSetAsync()
    {
        this.Probability = 60;
        this.SamplesSize = 1000;
        this.TimeToGenerateData = 0.0;

        this.GenerateDistribution();

        return base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await this.RenderChart();
    }

    private void GenerateDistribution()
    {
        var dateTime = DateTime.Now;

        // create a parametrized distribution instance
        var scaledProbability = (double)this.Probability / 100;
        var geometric = new MathNet.Numerics.Distributions.Geometric(scaledProbability);

        //// distribution properties
        mean = Math.Round(geometric.Mean, 2, MidpointRounding.AwayFromZero);
        variance = Math.Round(geometric.Variance, 2, MidpointRounding.AwayFromZero);
        entropy = geometric.Entropy;

        //double c = geometric.CumulativeDistribution(0.6); // CDF

        this.SamplesArray = geometric.Samples().Take(this.SamplesSize).ToArray();

        var dateTimeElapsed = (DateTime.Now - dateTime).TotalMilliseconds;
        this.TimeToGenerateData = dateTimeElapsed;
    }

    private void OnProbabilityUpdated(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            this.Probability = index;
            this.GenerateDistribution();
        }
    }

    private void OnSamplesSizeUpdated(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            this.SamplesSize = index;
            this.GenerateDistribution();
        }
    }

    private async Task RenderChart()
    {
        await JSRuntime.InvokeVoidAsync("createD3SvgObject", this.SamplesArray, mean, "Geometric Sample Distribution");
    }
}