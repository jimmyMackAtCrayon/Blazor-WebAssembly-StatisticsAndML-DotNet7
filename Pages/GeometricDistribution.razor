@page "/GeometricDistribution"

@inject IJSRuntime JSRuntime

<div class="contentWrapper">

    <article class="contentSection middle flexer">

        <dl>
            <dt>Distribution Mean:</dt>
            <dd class="bumpLeft">@this.mean</dd>
            <dt>Distribution Variance:</dt>
            <dd class="bumpLeft">@variance</dd>
            <dt>Time to generate data (ms):</dt>
            <dd class="bumpLeft">@TimeToGenerateData</dd>

            <dt>Probability:</dt>

            <dd style="padding-left:6px">
                <input class="range" id="probabilityInput" type="range" min="5" max="100" step="5"
                       value="@this.Probability" @onchange="@OnProbabilityUpdated" oninput="probabilityOutput.value=probabilityInput.value/100" />
                <output name="probabilityOutput" style="color:#094E5D; padding-left:6px; font-size:16px;" id="probabilityOutput" for="probabilityInput">@(this.Probability / 100)</output>
            </dd>



            <dt>Samples Size:</dt>
            <dd style="padding-left:6px">
                <input class="range" id="samplesSizeInput" type="range" min="250" max="20000" step="250"
                       value="@this.SamplesSize" @onchange="@OnSamplesSizeUpdated" oninput="samplesSizeOutput.value=samplesSizeInput.value" />
                <output name="samplesSizeOutput" style="color:#094E5D;padding-left:6px;font-size:16px;" id="samplesSizeOutput" for="samplesSizeInput">@this.SamplesSize</output>
            </dd>


        </dl>

    </article>
    <article class="contentSection contentSection1" id="my_dataviz">
    </article>
    <article class="contentSection" style="background-color:transparent;">
        &nbsp;
    </article>




</div>

@code {

    public double Probability { get; set; }
    public int SamplesSize { get; set; }
    public int[] SamplesArray { get; set; }
    public double TimeToGenerateData { get; set; }

    public class Data
    {
        public double Y;
    }

    public List<Data> samples = new List<Data>(1000);
    double mean, variance, entropy;

    protected override Task OnParametersSetAsync()
    {
        this.Probability = 60;
        this.SamplesSize = 1000;
        this.TimeToGenerateData = 0.0;

        this.GenerateDistribution();

        return base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await this.RenderChart();
    }

    private void GenerateDistribution()
    {
        var dateTime = DateTime.Now;

        // create a parametrized distribution instance
        var scaledProbability = (double)this.Probability / 100;
        var geometric = new MathNet.Numerics.Distributions.Geometric(scaledProbability);

        //// distribution properties
        mean = Math.Round(geometric.Mean, 2, MidpointRounding.AwayFromZero);
        variance = Math.Round(geometric.Variance, 2, MidpointRounding.AwayFromZero);
        entropy = geometric.Entropy;

        //double c = geometric.CumulativeDistribution(0.6); // CDF

        this.SamplesArray = geometric.Samples().Take(this.SamplesSize).ToArray();

        var dateTimeElapsed = (DateTime.Now - dateTime).TotalMilliseconds;
        this.TimeToGenerateData = dateTimeElapsed;
    }

    private void OnProbabilityUpdated(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            this.Probability = index;
            this.GenerateDistribution();
        }
    }

    private void OnSamplesSizeUpdated(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            this.SamplesSize = index;
            this.GenerateDistribution();
        }
    }

    private async Task RenderChart()
    {
        await JSRuntime.InvokeVoidAsync("createD3SvgObject", this.SamplesArray, mean, "Geometric Sample Distribution");
    }
}